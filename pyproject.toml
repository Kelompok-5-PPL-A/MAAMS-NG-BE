[tool.commitizen]
name = "cz_conventional_commits"
version = "0.1.0"
tag_format = "v$version"
version_files = [
    "setup.py:version",
    "MAAMS_NG_BE/__init__.py:__version__"
]
bump_message = "bump: version $current_version â†’ $new_version [skip ci]"
update_changelog_on_bump = true
changelog_incremental = true
changelog_sections = [
    "feature",
    "fix",
    "documentation",
    "refactor",
    "performance",
    "test",
    "build",
    "ci",
    "chore"
]

[tool.commitizen.customize]
message_template = "{type}({scope}): {subject}"
example = "feat(api): add new endpoint for user authentication"
schema = "<type>(<scope>): <subject>"

# Explicitly define which commit types trigger version bumps
bump_pattern = "^(BREAKING CHANGE|feat|fix|refactor|perf)"
bump_map = { "BREAKING CHANGE" = "MAJOR", "feat" = "MINOR", "fix" = "PATCH", "refactor" = "PATCH", "perf" = "PATCH" }

# Define all possible commit types and their behavior
commit_parser = "^(?P<type>feat|fix|refactor|perf|docs|style|test|build|ci|chore|revert)(?:\\((?P<scope>[^()\\r\\n]*)\\))?(?P<breaking>!)?: (?P<message>.*)"

# Define which commit types should be included in changelog
changelog_pattern = "^(feat|fix|refactor|perf|docs|style|test|build|ci|chore|revert)"

# Define which commit types should NOT trigger version bumps
no_bump_types = [
    "docs",    # Documentation changes
    "style",   # Code style changes
    "test",    # Test changes
    "build",   # Build system changes
    "ci",      # CI configuration changes
    "chore",   # Maintenance tasks
    "revert"   # Reverting changes
]

# Define which commit types should be included in changelog but not trigger version bumps
changelog_only_types = [
    "docs",
    "style",
    "test",
    "build",
    "ci",
    "chore",
    "revert"
] 