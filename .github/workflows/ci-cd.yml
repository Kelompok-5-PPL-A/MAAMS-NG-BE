name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - staging
      - development
      - ci-cd
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
      - staging
      - development
      - ci-cd

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  SERVICE_ACCOUNT_EMAIL: ${{ secrets.GCP_SA_EMAIL }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
  
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage
      - name: Run tests and generate coverage
        run: |
          coverage run manage.py test
          coverage report
          coverage html
          coverage xml
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.xml
            htmlcov/
      - name: Upload coverage reports to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          verbose: true
  
  sonarqube-analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
      - name: SonarCloud Scan and Analysis
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  data-seeding:
    name: Automatic Data Seeding
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Set up database and seed test data
        env:
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
        run: |
          python manage.py migrate
          python manage.py seed_causes_server
          mkdir -p cause/fixtures
          python manage.py dumpdata cause question --indent 2 > cause/fixtures/server_data.json
      - name: Upload fixtures
        uses: actions/upload-artifact@v4
        with:
          name: fixtures
          path: cause/fixtures/

  zap-scan:
    name: Scan the Web Application
    runs-on: ubuntu-latest
    permissions:
      issues: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          target: 'https://maams-ng.vercel.app/'
          
  semantic-release:
    name: Semantic Release for Automated Versioning
    runs-on: ubuntu-latest
    needs: [test, sonarqube-analysis]
    outputs:
      version: ${{ steps.semantic.outputs.version }}
      tag: ${{ steps.semantic.outputs.tag }}
    permissions:
      contents: write
      issues: write
      pull-requests: write
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install python-semantic-release
        run: |
          python -m pip install --upgrade pip
          pip install python-semantic-release==8.5.2
      
      - name: Check for existing tags
        id: check_tags
        run: |
          if ! git tag | grep -q "^v[0-9]\+\.[0-9]\+\.[0-9]\+"; then
            echo "has_version_tags=false" >> $GITHUB_OUTPUT
          else
            echo "has_version_tags=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Create initial version tag if needed
        if: steps.check_tags.outputs.has_version_tags == 'false'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          echo "Creating initial version tag v0.0.0"
          git tag v0.0.0
          git push origin v0.0.0
      
      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
      
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_tag_gpgsign: true
      
      - name: Python Semantic Release
        id: semantic
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          python -m semantic_release publish
          VERSION=$(grep -Po '(?<=version=")[^"]*' setup.py)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          
      - name: Ensure Tag is Pushed
        if: steps.semantic.outputs.version != '0.0.0'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          VERSION=$(grep -Po '(?<=version=")[^"]*' setup.py)
          TAG="v$VERSION"
          echo "Ensuring tag $TAG is pushed to repository"
          git push origin "$TAG" --force

  build-staging:
    name: Build and Package for Staging
    runs-on: ubuntu-latest
    needs: semantic-release
    environment: staging
    outputs:
      image_tag: ${{ steps.build.outputs.image_tag }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Configure Docker
        run: gcloud auth configure-docker
      
      - name: Build and Push Docker Image
        id: build
        run: |
          VERSION="${{needs.semantic-release.outputs.version}}"
          if [ -z "$VERSION" ]; then
            VERSION="$(git describe --tags --abbrev=0)-$(git rev-parse --short HEAD)"
          fi
          echo "Version: $VERSION"
          
          IMAGE_TAG="gcr.io/$PROJECT_ID/maams-ng-staging:$VERSION"
          
          docker build \
            --build-arg VERSION="$VERSION" \
            --build-arg BUILD_TIME="$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
            --build-arg GIT_COMMIT="$(git rev-parse HEAD)" \
            -t "$IMAGE_TAG" \
            -t "gcr.io/$PROJECT_ID/maams-ng-staging:latest" \
            .
            
          docker push "$IMAGE_TAG"
          docker push "gcr.io/$PROJECT_ID/maams-ng-staging:latest"
          
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "$IMAGE_TAG" > image_tag.txt
          echo "Debug - IMAGE_TAG set to: $IMAGE_TAG"

          if [ -f "$GITHUB_OUTPUT" ]; then
            echo "GITHUB_OUTPUT file exists and contains:"
            cat $GITHUB_OUTPUT
          fi
      
      - name: Upload Image Tag as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: image-tag
          path: image_tag.txt
          retention-days: 1

  deploy-staging-blue-green:
    name: Blue/Green Deployment to Staging
    runs-on: ubuntu-latest
    needs: [build-staging, semantic-release]
    environment:
      name: staging
      url: https://maams-ng.netlify.app/
    env:
      VERSION: ${{needs.semantic-release.outputs.version}}
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Download Image Tag Artifact
        uses: actions/download-artifact@v4
        with:
          name: image-tag
      
      - name: Determine Image Tag
        id: get_image_tag
        run: |
          IMAGE_TAG="${{needs.build-staging.outputs.image_tag}}"
          
          if [ -z "$IMAGE_TAG" ] && [ -f "image_tag.txt" ]; then
            IMAGE_TAG=$(cat image_tag.txt)
            echo "Using image tag from artifact: $IMAGE_TAG"
          fi

          if [ -z "$IMAGE_TAG" ]; then
            echo "WARNING: Constructing image tag manually"
            IMAGE_TAG="gcr.io/$PROJECT_ID/maams-ng-staging:$VERSION"
            echo "Constructed image tag: $IMAGE_TAG"
          fi
          
          echo "Using IMAGE_TAG: $IMAGE_TAG"
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
      
      - name: Get Current Active Color
        id: get_color
        run: |
          SERVICE_EXISTS=true
          if ! gcloud run services describe maams-ng-staging \
            --platform managed \
            --region $REGION \
            --format='get(name)' 2>/dev/null; then
            SERVICE_EXISTS=false
          fi
          
          if [ "$SERVICE_EXISTS" = false ]; then
            # First deployment - start with blue
            echo "current=" >> $GITHUB_OUTPUT
            echo "new=blue" >> $GITHUB_OUTPUT
          else
            ACTIVE_COLOR=$(gcloud run services describe maams-ng-staging \
              --platform managed \
              --region $REGION \
              --format='value(metadata.annotations."serving.knative.dev/tags")' 2>/dev/null || echo "")
            
            if [[ -z "$ACTIVE_COLOR" ]]; then
              # No active color, start with blue
              echo "current=" >> $GITHUB_OUTPUT
              echo "new=blue" >> $GITHUB_OUTPUT
            elif [[ $ACTIVE_COLOR =~ "blue" ]]; then
              echo "current=blue" >> $GITHUB_OUTPUT
              echo "new=green" >> $GITHUB_OUTPUT
            else
              echo "current=green" >> $GITHUB_OUTPUT
              echo "new=blue" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Deploy New Version (${{ steps.get_color.outputs.new }})
        run: |
          echo "Image tag: $IMAGE_TAG"
          
          if ! gcloud run services describe maams-ng-staging \
            --platform managed \
            --region $REGION \
            --format='get(name)' 2>/dev/null; then
            
            gcloud run services create maams-ng-staging \
              --platform managed \
              --region $REGION \
              --allow-unauthenticated \
              --image=gcr.io/cloudrun/hello
          fi
          
          if [ -z "$IMAGE_TAG" ]; then
            echo "Error: Image tag is empty"
            exit 1
          fi
          
          gcloud run deploy maams-ng-staging \
            --image "$IMAGE_TAG" \
            --platform managed \
            --region $REGION \
            --allow-unauthenticated \
            --memory 512Mi \
            --cpu 1 \
            --min-instances 1 \
            --max-instances 10 \
            --concurrency 250 \
            --timeout 300 \
            --port 8000 \
            --tag ${{steps.get_color.outputs.new}} \
            --set-env-vars "VERSION=$VERSION" \
            --set-env-vars "ENVIRONMENT=staging" \
            --set-env-vars "DEPLOYMENT_COLOR=${{steps.get_color.outputs.new}}"        

      - name: Switch Traffic to New Version
        run: |
          MAX_ATTEMPTS=3
          ATTEMPT=1
          SUCCESS=false
      
          while [ $ATTEMPT -le $MAX_ATTEMPTS ] && [ "$SUCCESS" = false ]; do
            echo "Attempt $ATTEMPT to update traffic..."
            
            if [ -n "${{steps.get_color.outputs.current}}" ]; then
              if gcloud run services update-traffic maams-ng-staging \
                --platform managed \
                --region $REGION \
                --to-tags=${{steps.get_color.outputs.new}}=100,${{steps.get_color.outputs.current}}=0; then
                SUCCESS=true
              fi
            else
              if gcloud run services update-traffic maams-ng-staging \
                --platform managed \
                --region $REGION \
                --to-tags=${{steps.get_color.outputs.new}}=100; then
                SUCCESS=true
              fi
            fi
            
            if [ "$SUCCESS" = false ]; then
              echo "Attempt $ATTEMPT failed. Retrying in 5 seconds..."
              sleep 5
              ATTEMPT=$((ATTEMPT+1))
            fi
          done
          
          if [ "$SUCCESS" = false ]; then
            echo "Failed to update traffic after $MAX_ATTEMPTS attempts."
            exit 1
          fi

  autoscaling-configuration:
    name: Configure Autoscaling
    runs-on: ubuntu-latest
    needs: [deploy-staging-blue-green]
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Configure Instance Limits
        run: |
          gcloud run services update maams-ng-staging \
            --min-instances 2 \
            --max-instances 20 \
            --cpu-throttling \
            --cpu-boost \
            --execution-environment gen2 \
            --platform managed \
            --region $REGION
      
      - name: Configure Autoscaling Annotations
        run: |
          gcloud run services update maams-ng-staging \
            --platform managed \
            --region $REGION \
            --update-annotations="autoscaling.knative.dev/metric=concurrency" \
            --update-annotations="autoscaling.knative.dev/target=80" \
            --update-annotations="run.googleapis.com/cpu-throttling=true"

  rollback-preparation:
    name: Prepare Rollback Plan
    runs-on: ubuntu-latest
    needs: [deploy-staging-blue-green, semantic-release]
    steps:
      - name: Store Deployment Metadata
        run: |
          METADATA='{
            "version": "${{needs.semantic-release.outputs.version}}",
            "timestamp": "'$(date -u +'%Y-%m-%dT%H:%M:%SZ')'",
            "git_commit": "'${{ github.sha }}'",
            "deployed_by": "'${{ github.actor }}'",
            "deployment_color": "'${{ needs.deploy-staging-blue-green.steps.get_color.outputs.new }}'",
            "rollback_version": "'${{needs.semantic-release.outputs.tag}}'",
            "rollback_command": "gcloud run services update-traffic maams-ng-staging --to-tags '${{ needs.deploy-staging-blue-green.steps.get_color.outputs.current }}'=100"
          }'
          
          echo "$METADATA" > deployment-metadata.json
      
      - name: Upload Rollback Plan
        uses: actions/upload-artifact@v4
        with:
          name: rollback-plan-${{needs.semantic-release.outputs.version}}
          path: deployment-metadata.json
          retention-days: 30