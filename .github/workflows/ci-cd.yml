name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - staging
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
      - staging

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  SERVICE_ACCOUNT_EMAIL: ${{ secrets.GCP_SA_EMAIL }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
  
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage
      - name: Run tests
        env:
          DJANGO_SETTINGS_MODULE: MAAMS_NG_BE.settings
          DATABASE_URL: sqlite:///db.sqlite3
        run: |
          coverage run manage.py test
          coverage report
          coverage html
          coverage xml
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.xml
            htmlcov/
      - name: Upload coverage reports to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          verbose: true
  
  sonarqube-analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
      - name: SonarCloud Scan and Analysis
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  semantic-release:
    name: Semantic Release for Automated Versioning
    runs-on: ubuntu-latest
    needs: [test, sonarqube-analysis]
    outputs:
      version: ${{ steps.semantic.outputs.version }}
      tag: ${{ steps.semantic.outputs.tag }}
    permissions:
      contents: write
      issues: write
      pull-requests: write
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install python-semantic-release
        run: |
          python -m pip install --upgrade pip
          pip install python-semantic-release==8.5.2
      
      - name: Check for existing tags
        id: check_tags
        run: |
          if ! git tag | grep -q "^v[0-9]\+\.[0-9]\+\.[0-9]\+"; then
            echo "has_version_tags=false" >> $GITHUB_OUTPUT
          else
            echo "has_version_tags=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Create initial version tag if needed
        if: steps.check_tags.outputs.has_version_tags == 'false'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          echo "Creating initial version tag v0.1.0"
          git tag v0.1.0
          git push origin v0.1.0
      
      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
      
      - name: Python Semantic Release
        id: semantic
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          python -m semantic_release publish
          VERSION=$(grep -Po '(?<=version=")[^"]*' MAAMS_NG_BE/setup.py)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "tag=$TAG" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: semantic-release
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    outputs:
      image_tag: ${{ steps.build.outputs.image_tag }}
      revision_name: ${{ steps.deploy.outputs.revision_name }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Configure Docker
        run: gcloud auth configure-docker
      
      - name: Build and Push Docker Image
        id: build
        run: |
          VERSION="${{needs.semantic-release.outputs.version}}"
          if [ -z "$VERSION" ]; then
            VERSION="$(git describe --tags --abbrev=0)-$(git rev-parse --short HEAD)"
          fi
          echo "Version: $VERSION"
          
          ENV_SUFFIX="${{ github.ref == 'refs/heads/main' && 'prod' || 'staging' }}"
          IMAGE_TAG="gcr.io/$PROJECT_ID/maams-ng-$ENV_SUFFIX:$VERSION"
          
          docker build \
            --build-arg VERSION="$VERSION" \
            --build-arg BUILD_TIME="$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
            --build-arg GIT_COMMIT="$(git rev-parse HEAD)" \
            -t "$IMAGE_TAG" \
            -t "gcr.io/$PROJECT_ID/maams-ng-$ENV_SUFFIX:latest" \
            .
            
          docker push "$IMAGE_TAG"
          docker push "gcr.io/$PROJECT_ID/maams-ng-$ENV_SUFFIX:latest"
          
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "$IMAGE_TAG" > image_tag.txt
      
      - name: Upload Image Tag as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: image-tag
          path: image_tag.txt
          retention-days: 1

      - name: Deploy to Cloud Run
        id: deploy
        run: |
          ENV_SUFFIX="${{ github.ref == 'refs/heads/main' && 'prod' || 'staging' }}"
          SERVICE_NAME="maams-ng-$ENV_SUFFIX"
          IMAGE_TAG="$(cat image_tag.txt)"
          
          REVISION_NAME=$(gcloud run deploy $SERVICE_NAME \
            --image "$IMAGE_TAG" \
            --platform managed \
            --region $REGION \
            --allow-unauthenticated \
            --memory 512Mi \
            --cpu 1 \
            --min-instances 1 \
            --max-instances 10 \
            --concurrency 250 \
            --timeout 300 \
            --port 8000 \
            --set-env-vars "DB_NAME=${{ secrets.DB_NAME }}" \
            --set-env-vars "DB_USER=${{ secrets.DB_USER }}" \
            --set-env-vars "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" \
            --set-env-vars "DB_PORT=${{ secrets.DB_PORT }}" \
            --set-env-vars "DB_HOST=${{ secrets.DB_HOST }}" \
            --set-env-vars "DATABASE_URL=${{ secrets.DATABASE_URL }}" \
            --set-env-vars "GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}" \
            --set-env-vars "SECRET_KEY=${{ secrets.SECRET_KEY }}" \
            --set-env-vars "SENTRY_DSN=${{ secrets.SENTRY_DSN }}" \
            --set-env-vars "HUGGINGFACE_URL=${{ secrets.HUGGINGFACE_URL }}" \
            --set-env-vars "HUGGINGFACE_TOKEN=${{ secrets.HUGGINGFACE_TOKEN }}" \
            --set-env-vars "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" \
            --set-env-vars "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" \
            --set-env-vars "CAS_URL=${{ secrets.CAS_URL }}" \
            --set-env-vars "SERVICE_URL=${{ secrets.SERVICE_URL }}" \
            --set-env-vars "ORIGIN_URL=${{ secrets.ORIGIN_URL }}" \
            --set-env-vars "ACCESS_TOKEN_EXP_TIME=${{ secrets.ACCESS_TOKEN_EXP_TIME }}" \
            --set-env-vars "REFRESH_TOKEN_EXP_TIME=${{ secrets.REFRESH_TOKEN_EXP_TIME }}" \
            --set-env-vars "ACCESS_TOKEN_SECRET_KEY=${{ secrets.ACCESS_TOKEN_SECRET_KEY }}" \
            --set-env-vars "REFRESH_TOKEN_SECRET_KEY=${{ secrets.REFRESH_TOKEN_SECRET_KEY }}" \
            --format='value(status.latestCreatedRevisionName)')
          
          echo "revision_name=$REVISION_NAME" >> $GITHUB_OUTPUT
          
          METADATA='{
            "version": "'$VERSION'",
            "timestamp": "'$(date -u +'%Y-%m-%dT%H:%M:%SZ')'",
            "git_commit": "'${{ github.sha }}'",
            "deployed_by": "'${{ github.actor }}'",
            "revision_name": "'$REVISION_NAME'",
            "environment": "'${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}'"
          }'
          
          echo "$METADATA" > deployment-metadata.json
      
      - name: Upload Deployment Metadata
        uses: actions/upload-artifact@v4
        with:
          name: deployment-metadata-$ENV_SUFFIX-$VERSION
          path: deployment-metadata.json
          retention-days: 30