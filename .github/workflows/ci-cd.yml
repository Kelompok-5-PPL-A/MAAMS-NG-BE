name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - staging
      - development
      - ci-cd
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
      - staging
      - development
      - ci-cd

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
  
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage
      - name: Run tests and generate coverage
        run: |
          coverage run manage.py test
          coverage report
          coverage html
          coverage xml
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.xml
            htmlcov/
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true  
          verbose: true  
      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
  
  sonarcloud-analysis:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
      - name: SonarCloud Scan and Analysis
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  
  publish-staging:
    name: Publish Staging Docker Image
    runs-on: ubuntu-latest
    needs: [test, sonarcloud-analysis]

    if: github.event_name == 'push' && (github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/development' || github.ref == 'refs/heads/ci-cd')
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.REGISTRY_USER }}/${{ secrets.IMAGE_NAME }}:staging
          build-args: |
            ENVIRONMENT=staging
            DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }}
            DATABASE_USERNAME=${{ secrets.STAGING_DATABASE_USERNAME }}
            DATABASE_PASSWORD=${{ secrets.STAGING_DATABASE_PASSWORD }}
            HOST_FE=${{ secrets.STAGING_HOST_FE }}
            SECRET_KEY=${{ secrets.STAGING_SECRET_KEY }}
            GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}
            SENTRY_DSN=${{ secrets.SENTRY_DSN }}
  
  publish-production:
    name: Publish Production Docker Image
    runs-on: ubuntu-latest
    needs: [test, sonarcloud-analysis]

    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.REGISTRY_USER }}/${{ secrets.IMAGE_NAME }}:production
          build-args: |
            ENVIRONMENT=production
            DATABASE_URL=${{ secrets.PROD_DATABASE_URL }}
            DATABASE_USERNAME=${{ secrets.PROD_DATABASE_USERNAME }}
            DATABASE_PASSWORD=${{ secrets.PROD_DATABASE_PASSWORD }}
            HOST_FE=${{ secrets.PROD_HOST_FE }}
            SECRET_KEY=${{ secrets.PROD_SECRET_KEY }}
            GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}
  
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: publish-staging

    if: github.event_name == 'push' && (github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/development' || github.ref == 'refs/heads/ci-cd')
    environment:
      name: staging
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Install SSH client
        run: sudo apt-get install openssh-client
      - name: Create SSH key
        run: echo "${{ secrets.STAGING_SSH_KEY }}" > ssh-key.pem
      - name: Update permissions
        run: chmod 400 ssh-key.pem
      - name: Deploy to Staging Server
        run: |
          ssh -o StrictHostKeyChecking=no -i ssh-key.pem ${{ secrets.STAGING_USERNAME }}@${{ secrets.STAGING_IP }} "
            sudo docker container rm -f maams-ng-staging || true &&
            sudo docker image rm -f ${{ secrets.REGISTRY_USER }}/${{ secrets.IMAGE_NAME }}:staging || true &&
            sudo docker run --name maams-ng-staging -d -p 80:8000 \
            -e DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }} \
            -e DATABASE_USERNAME=${{ secrets.STAGING_DATABASE_USERNAME }} \
            -e DATABASE_PASSWORD=${{ secrets.STAGING_DATABASE_PASSWORD }} \
            -e SECRET_KEY=${{ secrets.STAGING_SECRET_KEY }} \
            -e DEBUG=True \
            ${{ secrets.REGISTRY_USER }}/${{ secrets.IMAGE_NAME }}:staging"
  
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: publish-production

    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    environment:
      name: production
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Install SSH client
        run: sudo apt-get install openssh-client
      - name: Create SSH key
        run: echo "${{ secrets.PROD_SSH_KEY }}" > ssh-key.pem
      - name: Update permissions
        run: chmod 400 ssh-key.pem
      - name: Deploy to Production Server
        run: |
          ssh -o StrictHostKeyChecking=no -i ssh-key.pem ${{ secrets.PROD_USERNAME }}@${{ secrets.PROD_IP }} "
            sudo docker container rm -f maams || true &&
            sudo docker image rm -f ${{ secrets.REGISTRY_USER }}/${{ secrets.IMAGE_NAME }}:production || true &&
            sudo docker run --name maams -d -p 80:8000 \
            -e DATABASE_URL=${{ secrets.PROD_DATABASE_URL }} \
            -e DATABASE_USERNAME=${{ secrets.PROD_DATABASE_USERNAME }} \
            -e DATABASE_PASSWORD=${{ secrets.PROD_DATABASE_PASSWORD }} \
            -e SECRET_KEY=${{ secrets.PROD_SECRET_KEY }} \
            -e DEBUG=False \
            ${{ secrets.REGISTRY_USER }}/${{ secrets.IMAGE_NAME }}:production"