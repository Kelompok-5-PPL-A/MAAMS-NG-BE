name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - staging
      - development
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
      - staging
      - development
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - staging
          - production
      seed_data:
        description: 'Seed data in the environment'
        required: true
        type: boolean
        default: false
      rollback:
        description: 'Rollback to previous version'
        required: true
        type: boolean
        default: false

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  SERVICE_ACCOUNT_EMAIL: ${{ secrets.GCP_SA_EMAIL }}
  ZAP_TARGET: ${{ github.event_name == 'pull_request' && 'https://maams-ng-staging.run.app' || 'https://maams-ng-prod.run.app' }}

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_NAME }}
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage pytest pytest-cov

      - name: Run migrations and seed minimal data
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SECRET_KEY: ${{ secrets.TEST_SECRET_KEY }}
          DEBUG: "True"
        run: |
          sleep 5
          python manage.py makemigrations blacklist
          python manage.py migrate
          python manage.py seed blacklist authentication cause question tag --minimal

      - name: Run tests with coverage
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SECRET_KEY: ${{ secrets.TEST_SECRET_KEY }}
          DEBUG: "True"
        run: |
          coverage run -m pytest
          coverage report
          coverage xml

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.xml
            htmlcov/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

  security-scan:
    name: OWASP ZAP Security Scan
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository

    steps:
      - name: OWASP ZAP Scan
        uses: zaproxy/action-baseline@v0.9.0
        with:
          target: ${{ env.ZAP_TARGET }}
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Upload ZAP Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap-report.html

  semantic-release:
    name: Semantic Release
    needs: [build, security-scan]
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.semantic.outputs.version }}
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install python-semantic-release
        run: |
          python -m pip install --upgrade pip
          pip install python-semantic-release==8.5.2

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Python Semantic Release
        id: semantic
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          python -m semantic_release publish
          VERSION=$(grep -Po '(?<=version=")[^"]*' setup.py)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  build-and-push:
    name: Build and Push Docker Image
    needs: semantic-release
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.build.outputs.image_tag }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker
        run: gcloud auth configure-docker

      - name: Build and Push Docker Image
        id: build
        run: |
          VERSION="${{needs.semantic-release.outputs.version}}"
          if [ -z "$VERSION" ]; then
            VERSION="$(git describe --tags --abbrev=0)-$(git rev-parse --short HEAD)"
          fi
          
          IMAGE_TAG="gcr.io/$PROJECT_ID/maams-ng:$VERSION"
          
          DOCKER_BUILDKIT=1 docker build \
            --build-arg VERSION="$VERSION" \
            --build-arg BUILD_TIME="$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
            --build-arg GIT_COMMIT="$(git rev-parse HEAD)" \
            --cache-from "gcr.io/$PROJECT_ID/maams-ng:latest" \
            -t "$IMAGE_TAG" \
            -t "gcr.io/$PROJECT_ID/maams-ng:latest" \
            .
            
          docker push "$IMAGE_TAG"
          docker push "gcr.io/$PROJECT_ID/maams-ng:latest"
          
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to Cloud Run
    needs: build-and-push
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment || (github.event_name == 'pull_request' && 'staging' || 'production') }}
      url: https://maams-ng-${{ github.event.inputs.environment || (github.event_name == 'pull_request' && 'staging' || 'prod') }}.run.app

    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy to Cloud Run
        run: |
          ENVIRONMENT=${{ github.event.inputs.environment || (github.event_name == 'pull_request' && 'staging' || 'prod') }}
          
          gcloud run deploy maams-ng-$ENVIRONMENT \
            --image "${{needs.build-and-push.outputs.image_tag}}" \
            --platform managed \
            --region $REGION \
            --allow-unauthenticated \
            --memory 512Mi \
            --cpu 1 \
            --min-instances 1 \
            --max-instances 10 \
            --concurrency 250 \
            --timeout 300 \
            --port 8000 \
            --set-env-vars "VERSION=${{needs.semantic-release.outputs.version}}" \
            --set-env-vars "ENVIRONMENT=$ENVIRONMENT" \
            --set-env-vars "SENTRY_DSN=${{ secrets.SENTRY_DSN }}" \
            --set-env-vars "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" \
            --set-env-vars "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" \
            --set-env-vars "GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}"

      - name: Configure Autoscaling
        run: |
          ENVIRONMENT=${{ github.event.inputs.environment || (github.event_name == 'pull_request' && 'staging' || 'prod') }}
          
          gcloud run services update maams-ng-$ENVIRONMENT \
            --platform managed \
            --region $REGION \
            --min-instances 2 \
            --max-instances 20 \
            --cpu-throttling \
            --cpu-boost \
            --execution-environment gen2 \
            --update-annotations="autoscaling.knative.dev/metric=concurrency" \
            --update-annotations="autoscaling.knative.dev/target=80" \
            --update-annotations="run.googleapis.com/cpu-throttling=true"

      - name: Seed Environment Data
        if: github.event.inputs.seed_data == 'true'
        run: |
          ENVIRONMENT=${{ github.event.inputs.environment || (github.event_name == 'pull_request' && 'staging' || 'prod') }}
          
          SERVICE_URL=$(gcloud run services describe maams-ng-$ENVIRONMENT \
            --platform managed \
            --region $REGION \
            --format='value(status.url)')
          
          if [ "$ENVIRONMENT" = "staging" ]; then
            python manage.py seed --staging
          elif [ "$ENVIRONMENT" = "production" ]; then
            python manage.py seed --production
          else
            python manage.py seed --development
          fi

  monitor:
    name: Monitor Deployment
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Check Deployment Health
        run: |
          ENVIRONMENT=${{ github.event.inputs.environment || (github.event_name == 'pull_request' && 'staging' || 'prod') }}
          
          sleep 30
          
          SERVICE_STATUS=$(gcloud run services describe maams-ng-$ENVIRONMENT \
            --platform managed \
            --region $REGION \
            --format='value(status.conditions[0].status)')
          
          if [ "$SERVICE_STATUS" != "True" ]; then
            echo "Deployment failed: Service is not healthy"
            exit 1
          fi
          
          ERROR_COUNT=$(gcloud logging read "resource.type=cloud_run_revision AND resource.labels.service_name=maams-ng-$ENVIRONMENT AND severity>=ERROR" \
            --limit 5 \
            --format='value(textPayload)' | wc -l)
          
          if [ "$ERROR_COUNT" -gt 0 ]; then
            echo "Deployment warning: Found errors in recent logs"
            exit 1
          fi

  rollback:
    name: Rollback on Failure
    needs: [deploy, monitor]
    if: failure() || github.event.inputs.rollback == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Get Previous Version and Backup
        id: get_previous
        run: |
          ENVIRONMENT=${{ github.event.inputs.environment || (github.event_name == 'pull_request' && 'staging' || 'prod') }}
          
          PREVIOUS_VERSION=$(gcloud run services describe maams-ng-$ENVIRONMENT \
            --platform managed \
            --region $REGION \
            --format='value(metadata.annotations."run.googleapis.com/previous-revision")')
          
          if [ -z "$PREVIOUS_VERSION" ]; then
            echo "No previous version found for rollback"
            exit 1
          fi
          
          BACKUP_FILE=$(gsutil ls "gs://${{ secrets.GCS_BUCKET }}/database-backups/backup_${PREVIOUS_VERSION}_*.sql" | sort -r | head -n 1)
          
          if [ -z "$BACKUP_FILE" ]; then
            echo "No database backup found for version $PREVIOUS_VERSION"
            exit 1
          fi
          
          echo "previous_version=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT
          echo "backup_file=$BACKUP_FILE" >> $GITHUB_OUTPUT

      - name: Rollback Database
        run: |
          ENVIRONMENT=${{ github.event.inputs.environment || (github.event_name == 'pull_request' && 'staging' || 'prod') }}
          
          gsutil cp "gs://${{ secrets.GCS_BUCKET }}/scripts/db_restore.sh" /tmp/db_restore.sh
          chmod +x /tmp/db_restore.sh
          
          /tmp/db_restore.sh "${{ steps.get_previous.outputs.previous_version }}"
          
          if ! python manage.py check; then
            echo "Database rollback verification failed"
            exit 1
          fi

      - name: Rollback Application
        run: |
          ENVIRONMENT=${{ github.event.inputs.environment || (github.event_name == 'pull_request' && 'staging' || 'prod') }}
          
          echo "Rolling back to version: ${{ steps.get_previous.outputs.previous_version }}"
          
          gcloud run services update-traffic maams-ng-$ENVIRONMENT \
            --platform managed \
            --region $REGION \
            --to-revision=${{ steps.get_previous.outputs.previous_version }}=100

      - name: Verify Rollback
        run: |
          ENVIRONMENT=${{ github.event.inputs.environment || (github.event_name == 'pull_request' && 'staging' || 'prod') }}
          
          sleep 30
          
          SERVICE_STATUS=$(gcloud run services describe maams-ng-$ENVIRONMENT \
            --platform managed \
            --region $REGION \
            --format='value(status.conditions[0].status)')
          
          if [ "$SERVICE_STATUS" != "True" ]; then
            echo "Rollback failed: Service is not healthy"
            exit 1
          fi
          
          ERROR_COUNT=$(gcloud logging read "resource.type=cloud_run_revision AND resource.labels.service_name=maams-ng-$ENVIRONMENT AND severity>=ERROR" \
            --limit 5 \
            --format='value(textPayload)' | wc -l)
          
          if [ "$ERROR_COUNT" -gt 0 ]; then
            echo "Rollback warning: Found errors in recent logs"
            exit 1
          fi
          
          echo "Rollback completed successfully"