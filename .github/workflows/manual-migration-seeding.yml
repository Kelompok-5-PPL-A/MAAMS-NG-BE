name: Manual Migration and Seeding
on:
  workflow_dispatch:
    inputs:
      operation:
        description: 'Type of operation'
        required: true
        type: choice
        options:
          - migrate
          - rollback_migration
          - seed
          - undo_seed
      migration_name:
        description: 'Migration file name (optional)'
        required: false
        default: ''
      seeder_table:
        description: 'Table to seed (optional, default all)'
        required: false
        type: choice
        options:
          - all
          - questions
          - causes
          - tags
        default: 'all'
      app_name:
        description: 'App name for migration rollback (optional)'
        required: false
        type: choice
        options:
          - all
          - question
          - cause
          - tag
        default: 'all'

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  migrate:
    needs: setup
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.operation == 'migrate' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Migrate
        env:
          MIGRATION_NAME: ${{ github.event.inputs.migration_name }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          if [ -z "$MIGRATION_NAME" ]; then
            python manage.py migrate question && python manage.py migrate cause && python manage.py migrate tag
          else
            python manage.py migrate $MIGRATION_NAME
          fi

  rollback_migration:
    needs: setup
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.operation == 'rollback_migration' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Rollback Migration
        env:
          MIGRATION_NAME: ${{ github.event.inputs.migration_name }}
          APP_NAME: ${{ github.event.inputs.app_name }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          if [ "$APP_NAME" = "all" ]; then
            python manage.py migrate question zero && python manage.py migrate cause zero && python manage.py migrate tag zero
          else
            python manage.py migrate $APP_NAME $MIGRATION_NAME
          fi

  seed:
    needs: setup
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.operation == 'seed' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Seeder
        env:
          SEEDER_TABLE: ${{ github.event.inputs.seeder_table }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          case "$SEEDER_TABLE" in
            all) python manage.py seed_all ;;
            questions) python manage.py seed_questions ;;
            causes) python manage.py seed_causes ;;
            tags) python manage.py seed_tags ;;
            *) echo "Unknown seeder table: $SEEDER_TABLE"; exit 1;;
          esac

  undo_seed:
    needs: setup
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.operation == 'undo_seed' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Undo Seeder
        env:
          SEEDER_TABLE: ${{ github.event.inputs.seeder_table }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          case "$SEEDER_TABLE" in
            all) python manage.py seed_all --undo ;;
            questions) python manage.py undo_seed_questions ;;
            causes) python manage.py undo_seed_causes ;;
            tags) python manage.py undo_seed_tags ;;
            *) echo "Unknown seeder table: $SEEDER_TABLE"; exit 1;;
          esac 