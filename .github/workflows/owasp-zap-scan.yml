name: OWASP ZAP Security Scan

on:
  push:
    branches:
      - main
      - staging
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
      - staging
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - staging
          - production

jobs:
  zap-scan:
    name: OWASP ZAP Security Scan
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Start OWASP ZAP
        uses: zaproxy/action-baseline@v0.9.0
        with:
          target: ${{ github.event.inputs.environment == 'production' && secrets.PROD_URL || secrets.STAGING_URL }}
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
          fail_action: 'WARN'
      
      - name: Upload ZAP Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report-${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }}-$(date +%Y%m%d-%H%M%S)
          path: zap-report.html
          retention-days: 30
      
      - name: Check for Critical Issues
        run: |
          if grep -q "Risk: High" zap-report.html; then
            echo "Critical security issues found!"
            exit 1
          fi 